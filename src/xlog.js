// Generated by CoffeeScript 1.6.3
(function() {
  var XLogger,
    __slice = [].slice;

  window.XLOG_LEVEL = {
    ERROR: 5,
    WARN: 4,
    INFO: 3,
    DEBUG: 2,
    TRACE: 1
  };

  XLogger = (function() {
    function XLogger(name) {
      this.name = name;
      this.setLevel(XLOG_LEVEL.INFO);
    }

    XLogger.prototype.setLevel = function(level) {
      if (level == null) {
        throw new Error("Setting undefined level!");
      }
      return this.level = level;
    };

    XLogger.prototype.currentTimestamp = function() {
      return new Date().getTime();
    };

    XLogger.prototype.elapsedTime = function() {
      if (typeof XLoggerStartTime !== "undefined" && XLoggerStartTime !== null) {
        return this.currentTimestamp() - XLoggerStartTime;
      } else {
        return "???";
      }
    };

    XLogger.prototype.time = function() {
      return "[" + this.elapsedTime() + " ms]";
    };

    XLogger.prototype._log = function(level, objects) {
      var exception, line, lines, obj, result, text, time, _i, _len, _results;
      if (level >= this.level) {
        time = this.time();
        _results = [];
        for (_i = 0, _len = objects.length; _i < _len; _i++) {
          obj = objects[_i];
          text = (function() {
            if (obj == null) {
              return "null";
            } else if (obj instanceof Error) {
              return obj.stack;
            } else {
              try {
                result = JSON.stringify(obj, null, 2);
              } catch (_error) {
                exception = _error;
                console.log(obj);
                result = "<SEE ABOVE>";
              }
              return result;
            }
          })();
          lines = text.split("\n");
          _results.push((function() {
            var _j, _len1, _results1;
            _results1 = [];
            for (_j = 0, _len1 = lines.length; _j < _len1; _j++) {
              line = lines[_j];
              _results1.push(console.log(time + " '" + this.name + "': " + line));
            }
            return _results1;
          }).call(this));
        }
        return _results;
      }
    };

    XLogger.prototype.error = function() {
      var objects;
      objects = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this._log(XLOG_LEVEL.ERROR, objects);
    };

    XLogger.prototype.warn = function() {
      var objects;
      objects = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this._log(XLOG_LEVEL.WARN, objects);
    };

    XLogger.prototype.info = function() {
      var objects;
      objects = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this._log(XLOG_LEVEL.INFO, objects);
    };

    XLogger.prototype.debug = function() {
      var objects;
      objects = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this._log(XLOG_LEVEL.DEBUG, objects);
    };

    XLogger.prototype.trace = function() {
      var objects;
      objects = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this._log(XLOG_LEVEL.TRACE, objects);
    };

    return XLogger;

  })();

  if (window.XLoggerStartTime == null) {
    window.XLoggerStartTime = new Date().getTime();
  }

  if (window.getXLogger == null) {
    window.getXLogger = function(name) {
      return new XLogger(name);
    };
  }

}).call(this);

/*
//@ sourceMappingURL=xlog.map
*/
